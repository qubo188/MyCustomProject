package com.qbwc.mytest.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.qbwc.mytest.entity.Advertise;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADVERTISE".
*/
public class AdvertiseDao extends AbstractDao<Advertise, Long> {

    public static final String TABLENAME = "ADVERTISE";

    /**
     * Properties of entity Advertise.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Subtitle = new Property(2, String.class, "subtitle", false, "SUBTITLE");
        public final static Property Img_uri = new Property(3, String.class, "img_uri", false, "IMG_URI");
        public final static Property Click_uri = new Property(4, String.class, "click_uri", false, "CLICK_URI");
    };


    public AdvertiseDao(DaoConfig config) {
        super(config);
    }
    
    public AdvertiseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADVERTISE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"SUBTITLE\" TEXT," + // 2: subtitle
                "\"IMG_URI\" TEXT," + // 3: img_uri
                "\"CLICK_URI\" TEXT);"); // 4: click_uri
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADVERTISE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Advertise entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
 
        String subtitle = entity.getSubtitle();
        if (subtitle != null) {
            stmt.bindString(3, subtitle);
        }
 
        String img_uri = entity.getImg_uri();
        if (img_uri != null) {
            stmt.bindString(4, img_uri);
        }
 
        String click_uri = entity.getClick_uri();
        if (click_uri != null) {
            stmt.bindString(5, click_uri);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Advertise readEntity(Cursor cursor, int offset) {
        Advertise entity = new Advertise( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // subtitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // img_uri
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // click_uri
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Advertise entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setSubtitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImg_uri(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClick_uri(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Advertise entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Advertise entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
